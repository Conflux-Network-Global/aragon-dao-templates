diff --git a/node_modules/@aragon/templates-shared/contracts/BaseTemplate.sol b/node_modules/@aragon/templates-shared/contracts/BaseTemplate.sol
index 8d092f2..7814a8b 100644
--- a/node_modules/@aragon/templates-shared/contracts/BaseTemplate.sol
+++ b/node_modules/@aragon/templates-shared/contracts/BaseTemplate.sol
@@ -76,8 +76,8 @@ contract BaseTemplate is APMNamehash, IsContract {
     *      `_transferRootPermissionsFromTemplateAndFinalizeDAO()` helper to transfer the root
     *      permissions to the end entity in control of the organization.
     */
-    function _createDAO() internal returns (Kernel dao, ACL acl) {
-        dao = daoFactory.newDAO(this);
+    function _createDAO(uint256 epoch) internal returns (Kernel dao, ACL acl) {
+        dao = daoFactory.newDAO(this, epoch);
         emit DeployDao(address(dao));
         acl = ACL(dao.acl());
         _createPermissionForTemplate(acl, dao, dao.APP_MANAGER_ROLE());
@@ -290,13 +290,14 @@ contract BaseTemplate is APMNamehash, IsContract {
         Kernel _dao,
         MiniMeToken _token,
         bool _transferable,
-        uint256 _maxAccountTokens
+        uint256 _maxAccountTokens,
+        uint256 epoch
     )
         internal returns (TokenManager)
     {
         TokenManager tokenManager = TokenManager(_installNonDefaultApp(_dao, TOKEN_MANAGER_APP_ID));
         _token.changeController(tokenManager);
-        tokenManager.initialize(_token, _transferable, _maxAccountTokens);
+        tokenManager.initialize(_token, _transferable, _maxAccountTokens, epoch);
         return tokenManager;
     }
 
diff --git a/node_modules/@aragon/templates-shared/lib/TemplatesDeployer.js b/node_modules/@aragon/templates-shared/lib/TemplatesDeployer.js
index ec9df64..75423cd 100644
--- a/node_modules/@aragon/templates-shared/lib/TemplatesDeployer.js
+++ b/node_modules/@aragon/templates-shared/lib/TemplatesDeployer.js
@@ -23,6 +23,7 @@ module.exports = class TemplateDeployer {
 
   async deployTemplate(contractName) {
     const Template = this.artifacts.require(contractName)
+    const epoch = await this.web3.cfx.getEpochNumber();
     const template = await Template.new(this.daoFactory.address, this.ens.address, this.miniMeFactory.address, this.aragonID.address)
     await logDeploy(template)
     return template
@@ -60,13 +61,13 @@ module.exports = class TemplateDeployer {
     const ENS = this.artifacts.require('ENS')
     if (this.options.ens) {
       this.log(`Using provided ENS: ${this.options.ens}`)
-      this.ens = ENS.at(this.options.ens)
+      this.ens = await ENS.at(this.options.ens)
     } else if (await this.arappENS()) {
       const ensAddress = await this.arappENS()
       this.log(`Using ENS from arapp json file: ${ensAddress}`)
-      this.ens = ENS.at(ensAddress)
+      this.ens = await ENS.at(ensAddress)
     } else if (await this.isLocal()) {
-      const { ens } = await deployENS(null, { web3: this.web3, artifacts: this.artifacts, owner: this.owner, verbose: this.verbose })
+      const ens = await (await deployENS(null, { web3: this.web3, artifacts: this.artifacts, owner: this.owner, verbose: this.verbose })).ens
       this.log('Deployed ENS:', ens.address)
       this.ens = ens
     } else {
@@ -78,18 +79,18 @@ module.exports = class TemplateDeployer {
     const APM = this.artifacts.require('APMRegistry')
     if (this.options.apm) {
       this.log(`Using provided APM: ${this.options.apm}`)
-      this.apm = APM.at(this.options.apm)
+      this.apm = await APM.at(this.options.apm)
     } else {
       if (await this._isAPMRegistered()) {
         const apmAddress = await this._fetchRegisteredAPM()
         this.log(`Using APM registered at aragonpm.eth: ${apmAddress}`)
-        this.apm = APM.at(apmAddress)
+        this.apm = await APM.at(apmAddress)
       } else if (await this.isLocal()) {
         await deployAPM(null, { artifacts: this.artifacts, web3: this.web3, owner: this.owner, ensAddress: this.ens.address, verbose: this.verbose })
         const apmAddress = await this._fetchRegisteredAPM()
         if (!apmAddress) this.error('Local APM deployment failed, aborting.')
         this.log('Deployed APM:', apmAddress)
-        this.apm = APM.at(apmAddress)
+        this.apm = await APM.at(apmAddress)
       } else {
         this.error('Please provide an APM instance or make sure there is one registered under "aragonpm.eth", aborting.')
       }
@@ -100,18 +101,18 @@ module.exports = class TemplateDeployer {
     const FIFSResolvingRegistrar = this.artifacts.require('FIFSResolvingRegistrar')
     if (this.options.aragonID) {
       this.log(`Using provided aragonID: ${this.options.aragonID}`)
-      this.aragonID = FIFSResolvingRegistrar.at(this.options.aragonID)
+      this.aragonID = await FIFSResolvingRegistrar.at(this.options.aragonID)
     } else {
       if (await this._isAragonIdRegistered()) {
         const aragonIDAddress = await this._fetchRegisteredAragonID()
         this.log(`Using aragonID registered at aragonid.eth: ${aragonIDAddress}`)
-        this.aragonID = FIFSResolvingRegistrar.at(aragonIDAddress)
+        this.aragonID = await FIFSResolvingRegistrar.at(aragonIDAddress)
       } else if (await this.isLocal()) {
         await deployAragonID(null, { artifacts: this.artifacts, web3: this.web3, owner: this.owner, ensAddress: this.ens.address, verbose: this.verbose })
         const aragonIDAddress = await this._fetchRegisteredAragonID()
         if (!aragonIDAddress) this.error('Local aragon ID deployment failed, aborting.')
         this.log('Deployed aragonID:', aragonIDAddress)
-        this.aragonID = FIFSResolvingRegistrar.at(aragonIDAddress)
+        this.aragonID = await FIFSResolvingRegistrar.at(aragonIDAddress)
       } else {
         this.error('Please provide an aragon ID instance or make sure there is one registered under "aragonid.eth", aborting.')
       }
@@ -122,7 +123,7 @@ module.exports = class TemplateDeployer {
     const DAOFactory = this.artifacts.require('DAOFactory')
     if (this.options.daoFactory) {
       this.log(`Using provided DAOFactory: ${this.options.daoFactory}`)
-      this.daoFactory = DAOFactory.at(this.options.daoFactory)
+      this.daoFactory = await DAOFactory.at(this.options.daoFactory)
     } else {
       const { daoFactory } = await deployDAOFactory(null, { artifacts: this.artifacts, owner: this.owner, verbose: this.verbose })
       this.log('Deployed DAOFactory:', daoFactory.address)
@@ -134,7 +135,7 @@ module.exports = class TemplateDeployer {
     const MiniMeTokenFactory = this.artifacts.require('MiniMeTokenFactory')
     if (this.options.miniMeFactory) {
       this.log(`Using provided MiniMeTokenFactory: ${this.options.miniMeFactory}`)
-      this.miniMeFactory = MiniMeTokenFactory.at(this.options.miniMeFactory)
+      this.miniMeFactory = await MiniMeTokenFactory.at(this.options.miniMeFactory)
     } else {
       this.miniMeFactory = await MiniMeTokenFactory.new()
       this.log('Deployed MiniMeTokenFactory:', this.miniMeFactory.address)
@@ -144,7 +145,7 @@ module.exports = class TemplateDeployer {
   async _fetchRegisteredAPM() {
     const aragonPMHash = namehash('aragonpm.eth')
     const PublicResolver = this.artifacts.require('PublicResolver')
-    const resolver = PublicResolver.at(await this.ens.resolver(aragonPMHash))
+    const resolver = await PublicResolver.at(await this.ens.resolver(aragonPMHash))
     return resolver.addr(aragonPMHash)
   }
 
@@ -160,8 +161,9 @@ module.exports = class TemplateDeployer {
 
   async _registerPackage(name, instance) {
     if (this.options.register) {
-      this.log(`Registering package for ${instance.constructor.contractName} as "${name}.aragonpm.eth"`)
-      return this.apm.newRepoWithVersion(name, this.owner, [1, 0, 0], instance.address, '')
+      const epoch = await this.web3.cfx.getEpochNumber() - 100;
+      this.log(`Registering package for ${instance.constructor.contractName} as "${name}.aragonpm.eth" (${instance.address}) with epoch ${epoch}`)
+      return this.apm.newRepoWithVersion(name, this.owner, [1, 0, 0], instance.address, '0x', epoch)
     }
   }
 
diff --git a/node_modules/@aragon/templates-shared/lib/network.js b/node_modules/@aragon/templates-shared/lib/network.js
index 0945fb9..891732f 100644
--- a/node_modules/@aragon/templates-shared/lib/network.js
+++ b/node_modules/@aragon/templates-shared/lib/network.js
@@ -10,15 +10,17 @@ module.exports = web3 => {
   }
 
   async function getNetworkName() {
-    const id = await getNetworkId()
-    const { networks } = require('@aragon/os/truffle-config')
-    const networkName = Object.keys(networks).find(name => networks[name].network_id == id)
-    return networkName || DEFAULT_NETWORK
+    // const id = await getNetworkId()
+    // const { networks } = require('@aragon/os/truffle-config')
+    // const networkName = Object.keys(networks).find(name => networks[name].network_id == id)
+    // return networkName || DEFAULT_NETWORK
+    return "cfx-testnet"
   }
 
   async function isLocalNetwork() {
-    const networkName = await getNetworkName()
-    return LOCAL_NETWORKS.includes(networkName)
+    // const networkName = await getNetworkName()
+    // return LOCAL_NETWORKS.includes(networkName)
+    return true
   }
 
   return {
